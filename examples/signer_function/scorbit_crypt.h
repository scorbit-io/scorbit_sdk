/****************************************************************************
 *
 * @author Dilshod Mukhtarov <dilshodm(at)gmail.com>
 * Sep 2024
 *
 ****************************************************************************/

#pragma once

#include <scorbit_sdk/net_types_c.h>
#include <stdint.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

// To make sure that the function symbol is not visible as "scorbit_sign()" in the binary
#define scorbit_sign a0e7b8b1

typedef enum {
    SIGN_OK = 0,
    SIGN_ERR_OPENSSL_INIT,      // Failed to initialize OpenSSL
    SIGN_ERR_CREATE_EC,         // Failed to create EC_KEY
    SIGN_ERR_CREATE_BIGNUM,     // Failed to convert key to BIGNUM
    SIGN_ERR_SET_PRIV_KEY,      // Failed to set private key
    SIGN_ERR_CREATE_POINT,      // Failed to create EC_POINT
    SIGN_ERR_CALC_PUB_KEY,      // Failed to calculate public key
    SIGN_ERR_SET_PUB_KEY,       // Failed to set public key
    SIGN_ERR_INVALID_KEY,       // Invalid key
    SIGN_ERR_KEY_CANNOT_SIGN,   // Key cannot sign
    SIGN_ERR_SIGN_FAILURE,      // Failed to sign the digest
    SIGN_ERR_INVALID_SIGNATURE, // Invalid signature generated
} SignErrorCode;

/**
 * @brief scorbit_sign used to sign given digest with the given private key.
 *
 * @param[out] signature - generated signature in DER format, it has to be pre-allocated buffer with
 *      at least SB_SIGNATURE_MAX_LENGTH (72) bytes.
 * @param[out] signature_len - actual length of the signature, not more than SB_SIGNATURE_MAX_LENGTH
 *      (72) bytes.
 * @param[in] digest - digest to sign (32 bytes), it's a SHA-256 hash, can be generated by
 *      @ref scorbit_digest.
 * @param[in] key - private key in binary format (32 bytes).
 *
 * @return error code or SIGN_OK if successful.
 */
extern SignErrorCode scorbit_sign(uint8_t signature[SB_SIGNATURE_MAX_LENGTH], size_t *signature_len,
                                  const uint8_t digest[SB_DIGEST_LENGTH],
                                  const uint8_t key[SB_KEY_LENGTH]);

#ifdef __cplusplus
}
#endif
